{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_BY_LENGTH","SORT_BY_ALPH","preparedGoods","getPreparedGoods","goods","sortType","preparedArray","sort","good1","good2","length","App","useState","sortField","setSortField","reverseMode","setReverseMode","visibleGoods","sortBy","reverse","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAiB,SACjBC,EAAe,iBAEjBC,EAAa,UAAOH,GAExB,SAASI,EAAiBC,EAAOC,GAC/B,IAAMC,EAAa,YAAOF,GAM1B,OAJIC,IAAaJ,GACfK,EAAcC,OAGZF,IAAaL,EAEbM,EAAcC,MAAK,SAACC,EAAOC,GAAR,OACjBD,EAAME,OAASD,EAAMC,UAKpBJ,EAGF,IAAMK,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEIC,EAAed,EAAiBD,EAAeW,GASnD,SAASK,EAAOb,GACdS,EAAaT,GACbF,EAAiBD,EAAeG,GAmBlC,OA5BIU,EACFE,EAAaE,WAEbF,EAAaE,UACbF,EAAed,EAAiBD,EAAeW,IAyB/C,sBAAKO,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWP,IAAcZ,EACrB,iBACA,0BAEJqB,QAAS,kBAAMJ,EAAOjB,IANxB,iCAWA,wBACEoB,KAAK,SACLD,UAAWP,IAAcb,EACrB,oBACA,6BAEJsB,QAAS,kBAAMJ,EAAOlB,IANxB,4BAWA,wBACEqB,KAAK,SACLD,UAA2B,OAAhBL,EACP,oBACA,6BAEJO,QAAS,WA9CXP,GACFC,EAAe,IACfC,EAAaE,YAEbH,EAAe,MACfC,EAAaE,YAmCX,qBAWEN,GAAaE,EAEX,wBACEM,KAAK,SACLD,UAAU,4BACVE,QAAS,kBA9CnBR,EAAa,IACbE,EAAe,SACfd,EAAa,UAAOH,KAyCZ,mBAQA,QAKN,6BACGkB,EAAaM,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC5HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1e52fe40.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BY_LENGTH = 'length';\nconst SORT_BY_ALPH = 'alphabetically';\n\nlet preparedGoods = [...goodsFromServer];\n\nfunction getPreparedGoods(goods, sortType) {\n  const preparedArray = [...goods];\n\n  if (sortType === SORT_BY_ALPH) {\n    preparedArray.sort();\n  }\n\n  if (sortType === SORT_BY_LENGTH) {\n    return (\n      preparedArray.sort((good1, good2) => (\n        good1.length - good2.length\n      ))\n    );\n  }\n\n  return preparedArray;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseMode, setReverseMode] = useState('');\n\n  let visibleGoods = getPreparedGoods(preparedGoods, sortField);\n\n  if (reverseMode) {\n    visibleGoods.reverse();\n  } else {\n    visibleGoods.reverse();\n    visibleGoods = getPreparedGoods(preparedGoods, sortField);\n  }\n\n  function sortBy(sortType) {\n    setSortField(sortType);\n    getPreparedGoods(preparedGoods, sortType);\n  }\n\n  function switchRevers() {\n    if (reverseMode) {\n      setReverseMode('');\n      visibleGoods.reverse();\n    } else {\n      setReverseMode('on');\n      visibleGoods.reverse();\n    }\n  }\n\n  function reset() {\n    setSortField('');\n    setReverseMode('');\n    preparedGoods = [...goodsFromServer];\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortField === SORT_BY_ALPH\n            ? 'button is-info'\n            : 'button is-info is-light'\n          }\n          onClick={() => sortBy(SORT_BY_ALPH)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortField === SORT_BY_LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'\n          }\n          onClick={() => sortBy(SORT_BY_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={reverseMode === 'on'\n            ? 'button is-warning'\n            : 'button is-warning is-light'\n          }\n          onClick={() => switchRevers()}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseMode)\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => reset()}\n            >\n              Reset\n            </button>\n          )\n          : null\n        }\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}